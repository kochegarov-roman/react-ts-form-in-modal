{"version":3,"sources":["components/Accordion.tsx","components/FormOrder.tsx","modal/Modal.tsx","constants/mock.ts","components/FormInModal.tsx","modal/useModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Accordion","props","useState","undefined","active","handleSetActive","isShow","setShow","className","onClick","title","style","viewBox","focusable","data-icon","width","height","fill","aria-hidden","d","items","map","item","handleChange","handleChangeItem","initialValidationParams","formFieldValid","firstName","lastName","email","productType","formValid","emailCheck","readyToSend","emptyField","FormOrder","additionalFeatures","productsTypes","totalPrice","setTotalPrice","setProductType","Set","additionalFeatureState","setAdditionalFeatureState","stateForm","setStateForm","validationState","setValidation","useEffect","priceForFeature","Array","from","reduce","acc","featureId","price","prevState","order","_additionalFeatures","forEach","push","handleSendForm","handleChangeFeatures","e","parseInt","target","value","checked","add","delete","validation","state","newState","fieldName","emailValid","match","isValidForm","Object","entries","every","event","name","id","action","onSubmit","preventDefault","type","placeholder","onChange","htmlFor","ind","feature","data-name","cols","rows","Modal","isShown","hide","modalContent","headerText","onKeyDown","keyCode","document","body","overflow","addEventListener","removeEventListener","modal","Fragment","ReactDOM","createPortal","0","1","FormInModal","setIsShown","toggle","useModal","toggleShow","errorSend","setErrorSend","sending","setSending","sendForm","data","a","fetch","method","headers","Accept","JSON","stringify","then","response","json","catch","reason","console","error","finally","result","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"kSAKaA,EAAmD,SAACC,GAAW,IAAD,EACrCC,wBAAkCC,GADG,mBAChEC,EADgE,KACxDC,EADwD,OAE7CH,oBAAS,GAFoC,mBAEhEI,EAFgE,KAExDC,EAFwD,KAUvE,OACI,sBAAKC,UAAS,oBAAeP,EAAMO,WAAnC,UACI,sBAAKA,UAAS,0BAAqBF,EAAS,iBAAmB,IAAMG,QAAS,kBAAMF,GAASD,IAA7F,WACW,OAANF,QAAM,IAANA,OAAA,EAAAA,EAAQM,QAAS,sBAClB,qBACIC,MAAOL,EAAS,CAAC,UAAa,kBAAoB,GAClDE,UAAWF,EAAS,SAAW,GAC/BM,QAAQ,gBAAgBC,UAAU,QAAQC,YAAU,QAAQC,MAAM,MAAMC,OAAO,MAC/EC,KAAK,eAAeC,cAAY,OAJpC,SAKI,sBACIC,EAAE,gMAGd,qBAAKX,UAAS,yBAAoBF,EAAS,sBAAwB,uBAAnE,SACKA,GAAUL,EAAMmB,OACbnB,EAAMmB,MAAMC,KACR,SAACC,GAAD,OAAuB,qBACVd,UAAU,iBACVC,QAAS,kBAxBjB,SAACa,GACtBf,GAASD,GACTD,EAAgBiB,GAChBrB,EAAMsB,cAAgBtB,EAAMsB,aAAaD,GAqBGE,CAAiBF,IAFtB,SAE8BA,EAAKZ,OAFzBY,EAAKZ,gBCjBxDe,EAA2E,CAC7EC,eAAgB,CAACC,WAAW,EAAOC,UAAU,EAAOC,OAAO,EAAOC,aAAa,GAC/EC,eAAW5B,EACX6B,YAAY,EACZC,aAAa,EACbC,WAAY,CAAC,YAAa,WAAY,gBAS7BC,EAAsC,SAAClC,GAAW,IAEpDmC,EAAqCnC,EAArCmC,mBAAoBC,EAAiBpC,EAAjBoC,cAF+B,EAGtBnC,mBAAS,GAHa,mBAGnDoC,EAHmD,KAGvCC,EAHuC,OAIpBrC,wBAAkCC,GAJd,mBAInD2B,EAJmD,KAItCU,EAJsC,OAKEtC,mBAAsB,IAAIuC,KAL5B,mBAKnDC,EALmD,KAK3BC,EAL2B,OAMxBzC,mBAAsC,IANd,mBAMnD0C,EANmD,KAMxCC,EANwC,OAOjB3C,mBAASuB,GAPQ,mBAOnDqB,EAPmD,KAOlCC,EAPkC,KAS1DC,qBAAU,WACN,IAAIC,EAAkBC,MAAMC,KAAKT,GAC5BU,QAAO,SAACC,EAAKC,GAAN,OAAoBD,EAAMjB,EAAmBkB,GAAWC,QAAO,GAC3EhB,EAAcU,IAA8B,OAAXnB,QAAW,IAAXA,OAAA,EAAAA,EAAayB,QAAS,MACxD,CAACb,EAAwBZ,IAE5BkB,qBAAU,WACNH,EAAa,2BAAID,GAAL,IAAgBd,YAAaA,KACzCiB,GAAc,SAAAS,GAEV,OADAA,EAAU9B,eAAeI,aAAc,EAChC0B,OAEZ,CAAC1B,IAGJkB,qBAAU,WACN,GAAIF,EAAgBb,YAAa,CAC7B,IAAIwB,EAAK,2BAAOb,GAAP,IAAkBN,eACvBoB,EAAgD,GACpDR,MAAMC,KAAKT,GAAwBiB,SAC/B,SAAAL,GAAS,OAAII,EAAoBE,KAAKxB,EAAmBkB,OAE7DG,EAAMrB,mBAAqBsB,EAC3BzD,EAAM4D,eAAeJ,MAE1B,CAACX,IAEJ,IAAMgB,EAA6D,SAACC,GAChE,IAAMT,EAAYU,SAASD,EAAEE,OAAOC,OAC/BH,EAAEE,OAAOE,QAMVxB,GAA0B,SAAAa,GAEtB,OADAA,EAAUY,IAAId,GACP,IAAIb,IAAIe,MAPnBb,GAA0B,SAAAa,GAEtB,OADAA,EAAUa,OAAOf,GACV,IAAIb,IAAIe,OAerBc,EAAa,SAACC,GAChBxB,GAAc,SAACS,GACX,IAAMgB,EAAQ,eAAOhB,GAOrB,GANAA,EAAUtB,WAAWyB,SACjB,SAACc,GACGD,EAAS9C,eAAe+C,KAAeF,EAAME,MAIjDjB,EAAUxB,WAAY,CAAC,IAAD,EAChB0C,KAAc,UAACH,EAAM1C,aAAP,aAAC,EAAa8C,MAAM,6BACxCH,EAAS9C,eAAeG,MAAQ6C,EAEpC,IAAME,EAAcC,OAAOC,QAAQN,EAAS9C,gBAAgBqD,OACxD,uDAIJ,OAFAP,EAASzC,UAAY6C,EACrBJ,EAASvC,YAAc2C,EAChBJ,MAITjD,EAAe,SAACyD,GAClBnC,EAAa,2BAAID,GAAL,kBAAiBoC,EAAMf,OAAOgB,KAAOD,EAAMf,OAAOC,SAC9DnB,GAAc,SAAAS,GAEV,OADAA,EAAU9B,eAAesD,EAAMf,OAAOgB,OAAQ,EACvCzB,MAIf,OACI,qBAAK0B,GAAG,aAAR,SACI,uBAAMC,OAAO,IAAIC,SArCJ,SAACJ,GAClBA,EAAMK,iBACNf,EAAW1B,IAmCP,UACI,qBAAKpC,UAAU,QAAf,wBAEA,sBAAKA,UAAU,aAAf,UACI,mBACIA,eAAyCL,IAA9B2C,EAAgBf,WACvBe,EAAgBpB,eAAeC,UAA2B,SAAf,aAFnD,uCAIA,uBAAOnB,eAAyCL,IAA9B2C,EAAgBf,WAC9Be,EAAgBpB,eAAeC,UAA4B,GAAhB,cACxC2D,KAAK,OAAOJ,GAAG,aAAaD,KAAK,YAAYM,YAAY,IAAIC,SAAUjE,IAC9E,uBAAOkE,QAAQ,aAAajF,UAAU,WAAtC,2BAGJ,sBAAKA,UAAU,aAAf,UACI,mBAAGA,eAAyCL,IAA9B2C,EAAgBf,WAC1Be,EAAgBpB,eAAeE,SAA0B,SAAf,aAD9C,sCAEA,uBAAOpB,eAAyCL,IAA9B2C,EAAgBf,WAC9Be,EAAgBpB,eAAeE,SAA2B,GAAhB,cAAoB0D,KAAK,OAAOJ,GAAG,YAC1ED,KAAK,WAAWM,YAAY,IAAIC,SAAUjE,IACjD,uBAAOkE,QAAQ,YAAYjF,UAAU,WAArC,0BAGJ,sBAAKA,UAAU,aAAf,UACI,mBAAGA,eAAyCL,IAA9B2C,EAAgBf,WAC1Be,EAAgBpB,eAAeG,MAAuB,SAAf,aAD3C,cAEyB1B,IAApByC,EAAUf,MAAsB,uBAAyB,uCAE9D,uBAAOrB,eAAyCL,IAA9B2C,EAAgBf,WAC9Be,EAAgBpB,eAAeG,MAAwB,GAAhB,cACpCyD,KAAK,OAAOJ,GAAG,QAAQD,KAAK,QAAQM,YAAY,IAAIC,SAAUjE,IACrE,uBAAOkE,QAAQ,QAAQjF,UAAU,WAAjC,+BAGJ,sBAAKA,UAAU,eAAf,UACI,uBAAOiF,QAAQ,eAAejF,UAAU,WAAxC,0BACA,sBAAKA,UAAU,eAAf,UACI,cAAC,EAAD,CACIY,MAAOiB,EACPd,aAAciB,EACdhC,eAAyCL,IAA9B2C,EAAgBf,WACvBe,EAAgBpB,eAAeI,YAA8B,GAAhB,gBAErD,mBAAGtB,eAAyCL,IAA9B2C,EAAgBf,WAC1Be,EAAgBpB,eAAeI,YAA6B,SAAf,aADjD,2CAIJ,uBAAOwD,KAAK,OAAO9E,UAAU,SAASyE,KAAK,cAAcO,SAAUjE,EAC5D2C,OAAkB,OAAXpC,QAAW,IAAXA,OAAA,EAAAA,EAAapB,QAAS,QAGvCmE,OAAOC,QAAQ1C,GAAoBf,KAChC,WAAuBqE,GAAvB,uBAAEpC,EAAF,KAAaqC,EAAb,YACI,sBAAKnF,UAAU,eAAeoF,YAAU,UAAxC,UACI,uBAAON,KAAK,WACLL,KAAMU,EAAQjF,MACdwD,MAAOZ,EACP9C,UAAU,WACV0E,GAAE,kBAAa5B,GACfkC,SAAU1B,IAEjB,uBAAO2B,QAAO,kBAAanC,GAAa9C,UAAU,OAAlD,SAA0DmF,EAAQjF,UARfgF,MAY/D,sBAAKlF,UAAU,aAAf,UACI,0BAAUyE,KAAK,UAAUC,GAAG,UAAUM,SAAUjE,EAAcgE,YAAY,IAAIM,KAAM,GAAIC,KAAM,IAC9F,uBAAOL,QAAQ,QAAQjF,UAAU,GAAjC,kCAGJ,sBAAKA,UAAU,eAAf,UACI,8CACA,sBAAK0E,GAAG,cAAR,cAAwB5C,QAE5B,qBAAK3B,MAAO,CAAC,UAAa,UAA1B,SACI,wBAAQ2E,KAAK,SAASJ,GAAG,aAAzB,+BCnLPa,G,MAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,QACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,aACAC,EACI,EADJA,WAIMC,EAAY,SAACpB,GACK,KAAlBA,EAAMqB,SAAkBL,GAC1BC,KAKJjD,qBAAU,WAGR,OAFWsD,SAASC,KAAK5F,MAAM6F,SAA/BR,EAA0C,SAA4C,QACtFM,SAASG,iBAAiB,UAAWL,GAAW,GACzC,WACLE,SAASI,oBAAoB,UAAWN,GAAW,MAEpD,CAACJ,IAGJ,IAAMW,EACJ,cAAC,IAAMC,SAAP,UACE,qBAAKpG,UAAU,aAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,sBAAKA,UAAU,QAAf,UACE,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAU,oBAAf,SAAoC2F,IACpC,qBAAK3F,UAAU,qBAAqBC,QAASwF,EAA7C,kBAEF,qBAAKzF,UAAU,gBAAf,SACE,sBAAMA,UAAU,eAAhB,SAAgC0F,eAO5C,OAAOF,EAAUa,IAASC,aAAaH,EAAOL,SAASC,MAAQ,OCnDpDnE,EAAyC,CAClD2E,EAAG,CAACrG,MAAO,6BAA8B6C,MAAO,KAChDyD,EAAG,CAACtG,MAAO,6BAA8B6C,MAAO,MAGvClB,EAAoC,CAC7C,CAAC3B,MAAO,cAAe6C,MAAO,IAC9B,CAAC7C,MAAO,eAAgB6C,MAAO,KAC/B,CAAC7C,MAAO,eAAgB6C,MAAO,MCHtB0D,EAAwB,WAAO,IAAD,ECNnB,WAAO,IAAD,EACE/G,oBAAkB,GADpB,mBACrB8F,EADqB,KACZkB,EADY,KAG5B,MAAO,CACLlB,UACAmB,OAHa,kBAAMD,GAAYlB,KDMgBoB,GAA/BpB,EAFuB,EAEhCA,QAA0BqB,EAFM,EAEdF,OAFc,EAGLjH,wBAA8BC,GAHzB,mBAGhCmH,EAHgC,KAGrBC,EAHqB,OAITrH,oBAAS,GAJA,mBAIhCsH,EAJgC,KAIvBC,EAJuB,KAMjCC,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,4DACD,2BACZH,GAAW,GACXJ,IAHa,SAIQQ,MAHT,2BAGoB,CAC5BC,OAAQ,OACRC,QAAS,CACT,eAAgB,mBACfC,OAAQ,oBAETzB,KAAM0B,KAAKC,UAAL,eAAmBP,MAExBQ,MAAK,SAAAC,GAEF,OADAb,GAAa,GACNa,EAASC,UAEnBC,OAAM,SAAAC,GACHC,QAAQC,MAAMF,GACdhB,GAAa,MAEhBmB,SAAQ,WACLjB,GAAW,MArBN,OAIPkB,EAJO,OAuBbH,QAAQI,IAAI,SAAUD,GAvBT,2CAAH,sDA+Bd,OACI,sBAAKnI,UAAU,gBAAf,UACI,sBAAKA,UAAU,eAAf,eACmBL,IAAdmH,GACG,qBAAK9G,UAAU,cAAf,SACK8G,EAAY,iBAAmB,uBAGvCE,GACG,qBAAKhH,UAAU,cAAf,wBAGJ,wBAAQ8E,KAAK,SAASJ,GAAG,YAAYzE,QAjB7B,WAChB4G,IACAE,OAAapH,IAeL,iCAEJ,cAAC,EAAD,CAAO6F,QAASA,EACTC,KAAMoB,EACNnB,aAAc,cAAC,EAAD,CAAW9D,mBAAoBA,EACpBC,cAAeA,EACfwB,eAAgB6D,IACzCvB,WAAY,SEpDhB0C,MARf,WACE,OACE,qBAAKrI,UAAU,GAAf,SACE,cAAC,EAAD,OCQSsI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdlC,IAASyC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjD,SAASkD,eAAe,SAM1BV,M","file":"static/js/main.a60c76c4.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {AccordionProps, ProductType} from \"../constants/types\";\n\n\n\nexport const Accordion: React.FC<AccordionProps<ProductType>> = (props) => {\n    const [active, handleSetActive] = useState<undefined | ProductType>(undefined);\n    const [isShow, setShow] = useState(false);\n\n    const handleChangeItem = (item: ProductType) => {\n        setShow(!isShow);\n        handleSetActive(item);\n        props.handleChange && props.handleChange(item);\n    };\n\n    return (\n        <div className={`accordion ${props.className}`}>\n            <div className={`title-accordion ${isShow ? 'show-accordion' : ''}`} onClick={() => setShow(!isShow)}>\n                {active?.title || 'Select product type'}\n                <svg\n                    style={isShow ? {'transform': 'rotate(270deg)'} : {}}\n                    className={isShow ? 'active' : ''}\n                    viewBox=\"64 64 896 896\" focusable=\"false\" data-icon=\"right\" width=\"1em\" height=\"1em\"\n                    fill=\"currentColor\" aria-hidden=\"true\">\n                    <path\n                        d=\"M765.7 486.8L314.9 134.7A7.97 7.97 0 00302 141v77.3c0 4.9 2.3 9.6 6.1 12.6l360 281.1-360 281.1c-3.9 3-6.1 7.7-6.1 12.6V883c0 6.7 7.7 10.4 12.9 6.3l450.8-352.1a31.96 31.96 0 000-50.4z\"></path>\n                </svg>\n            </div>\n            <div className={`accordion-body ${isShow ? 'show-accordion-body' : 'hide-accordion-body'}`}>\n                {isShow && props.items &&\n                    props.items.map(\n                        (item: ProductType) => <div key={item.title}\n                                     className='accordion-item'\n                                     onClick={() => handleChangeItem(item)}>{item.title}</div>\n                    )\n                }\n            </div>\n        </div>\n    )\n};","import React, {BaseSyntheticEvent, ChangeEvent, ChangeEventHandler, useEffect, useState} from 'react';\nimport '../index.sass';\nimport {Accordion} from './Accordion'\nimport {\n    AdditionalFeature,\n    AdditionalFeatures,\n    FormOrderInterface,\n    ProductType,\n    ValidationParamsInterface\n} from \"../constants/types\";\n\n\nconst requiredField = {firstName: false, lastName: false, email: false, productType: false};\n\nconst initialValidationParams: ValidationParamsInterface<typeof requiredField> = {\n    formFieldValid: {firstName: false, lastName: false, email: false, productType: false},\n    formValid: undefined,\n    emailCheck: true,\n    readyToSend: false,\n    emptyField: ['firstName', 'lastName', 'productType']\n};\n\nexport interface FormOrderProps {\n    additionalFeatures: AdditionalFeatures\n    productsTypes: Array<ProductType>\n    handleSendForm: (data: any) => {}\n}\n\nexport const FormOrder: React.FC<FormOrderProps> = (props) => {\n\n    const {additionalFeatures, productsTypes} = props;\n    const [totalPrice, setTotalPrice] = useState(0);\n    const [productType, setProductType] = useState<undefined | ProductType>(undefined);\n    const [additionalFeatureState, setAdditionalFeatureState] = useState<Set<number>>(new Set());\n    const [stateForm, setStateForm] = useState<Partial<FormOrderInterface>>({});\n    const [validationState, setValidation] = useState(initialValidationParams);\n\n    useEffect(() => {\n        let priceForFeature = Array.from(additionalFeatureState)\n            .reduce((acc, featureId) => acc + additionalFeatures[featureId].price, 0);\n        setTotalPrice(priceForFeature + (productType?.price || 0));\n    }, [additionalFeatureState, productType]);\n\n    useEffect(() => {\n        setStateForm({...stateForm, productType: productType});\n        setValidation(prevState => {\n            prevState.formFieldValid.productType = true;\n            return prevState;\n        })\n    }, [productType]);\n\n\n    useEffect(() => {\n        if (validationState.readyToSend) {\n            let order = {...stateForm, totalPrice};\n            let _additionalFeatures: Array<AdditionalFeature> = [];\n            Array.from(additionalFeatureState).forEach(\n                featureId => _additionalFeatures.push(additionalFeatures[featureId])\n            );\n            order.additionalFeatures = _additionalFeatures;\n            props.handleSendForm(order);\n        }\n    }, [validationState]);\n\n    const handleChangeFeatures: ChangeEventHandler<HTMLInputElement> = (e: ChangeEvent<HTMLInputElement>) => {\n        const featureId = parseInt(e.target.value);\n        if (!e.target.checked) {\n            setAdditionalFeatureState(prevState => {\n                prevState.delete(featureId);\n                return new Set(prevState);\n            });\n        } else {\n            setAdditionalFeatureState(prevState => {\n                prevState.add(featureId);\n                return new Set(prevState);\n            });\n        }\n    };\n\n    const handleSubmit = (event: BaseSyntheticEvent) => {\n        event.preventDefault();\n        validation(stateForm);\n    };\n\n    const validation = (state: Partial<FormOrderInterface>) => {\n        setValidation((prevState) => {\n            const newState = {...prevState};\n            prevState.emptyField.forEach(\n                (fieldName) => {\n                    newState.formFieldValid[fieldName] = !!state[fieldName];\n                }\n            );\n            // match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\n            if (prevState.emailCheck) {\n                const emailValid = !!state.email?.match(/^([\\w.%+-]+)@gmail.com$/i);\n                newState.formFieldValid.email = emailValid;\n            }\n            const isValidForm = Object.entries(newState.formFieldValid).every(\n                ([nameField, isValidField]) => isValidField\n            );\n            newState.formValid = isValidForm;\n            newState.readyToSend = isValidForm;\n            return newState;\n        });\n    };\n\n    const handleChange = (event: BaseSyntheticEvent) => {\n        setStateForm({...stateForm, [event.target.name]: event.target.value});\n        setValidation(prevState => {\n            prevState.formFieldValid[event.target.name] = true;\n            return prevState;\n        })\n    };\n\n    return (\n        <div id='order-form'>\n            <form action=\"/\" onSubmit={handleSubmit}>\n                <div className=\"title\">Title form</div>\n\n                <div className='form-field'>\n                    <p\n                        className={validationState.formValid !== undefined\n                        && !validationState.formFieldValid.firstName ? 'error-text' : 'd-none'}>Please fill in first\n                        name</p>\n                    <input className={validationState.formValid !== undefined\n                    && !validationState.formFieldValid.firstName ? 'error-field' : ''}\n                           type=\"text\" id='first-name' name=\"firstName\" placeholder=\" \" onChange={handleChange}/>\n                    <label htmlFor=\"first-name\" className=\"required\">First name</label>\n                </div>\n\n                <div className='form-field'>\n                    <p className={validationState.formValid !== undefined\n                    && !validationState.formFieldValid.lastName ? 'error-text' : 'd-none'}>Please fill in last name</p>\n                    <input className={validationState.formValid !== undefined\n                    && !validationState.formFieldValid.lastName ? 'error-field' : ''} type=\"text\" id='last-name'\n                           name=\"lastName\" placeholder=\" \" onChange={handleChange}/>\n                    <label htmlFor=\"last-name\" className=\"required\">Last Name</label>\n                </div>\n\n                <div className='form-field'>\n                    <p className={validationState.formValid !== undefined\n                    && !validationState.formFieldValid.email ? 'error-text' : 'd-none'}>\n                        {stateForm.email === undefined ? 'Please fill in email' : 'Please enter a valid email address'}\n                    </p>\n                    <input className={validationState.formValid !== undefined\n                    && !validationState.formFieldValid.email ? 'error-field' : ''}\n                           type=\"text\" id='email' name=\"email\" placeholder=\" \" onChange={handleChange}/>\n                    <label htmlFor=\"email\" className=\"required\">user@gmail.com</label>\n                </div>\n\n                <div className='field-around'>\n                    <label htmlFor=\"product-type\" className='required'>Product Type</label>\n                    <div className='field-select'>\n                        <Accordion\n                            items={productsTypes}\n                            handleChange={setProductType}\n                            className={validationState.formValid !== undefined\n                            && !validationState.formFieldValid.productType ? 'error-field' : ''}\n                        />\n                        <p className={validationState.formValid !== undefined\n                        && !validationState.formFieldValid.productType ? 'error-text' : 'd-none'}>\n                            Please select product type</p>\n                    </div>\n                    <input type=\"text\" className='d-none' name='productType' onChange={handleChange}\n                           value={productType?.title || \"\"}/>\n                </div>\n\n                {Object.entries(additionalFeatures).map(\n                    ([featureId, feature], ind) =>\n                        <div className='field-around' data-name='feature' key={ind}>\n                            <input type=\"checkbox\"\n                                   name={feature.title}\n                                   value={featureId}\n                                   className=\"checkbox\"\n                                   id={`feature-${featureId}`}\n                                   onChange={handleChangeFeatures}\n                            />\n                            <label htmlFor={`feature-${featureId}`} className='w100'>{feature.title}</label>\n                        </div>\n                )}\n\n                <div className='form-field'>\n                    <textarea name=\"comment\" id=\"comment\" onChange={handleChange} placeholder=\" \" cols={40} rows={3}/>\n                    <label htmlFor=\"email\" className=\"\">Type your comment</label>\n                </div>\n\n                <div className='field-around'>\n                    <div>Total price</div>\n                    <div id='total-price'>${totalPrice}</div>\n                </div>\n                <div style={{'textAlign': 'center'}}>\n                    <button type='submit' id='submit-btn'>Send form</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n","import React, {useEffect} from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport './modal.sass';\n\nexport interface ModalProps {\n  isShown: boolean;\n  hide: () => void;\n  modalContent: JSX.Element;\n  headerText: string;\n}\n\nexport const Modal: React.FC<ModalProps> = ({\n  isShown,\n  hide,\n  modalContent,\n  headerText,\n}) => {\n\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (event.keyCode === 27 && isShown) {\n      hide();\n    }\n  };\n\n\n  useEffect(() => {\n    isShown ? (document.body.style.overflow = 'hidden') : (document.body.style.overflow = 'unset');\n    document.addEventListener('keydown', onKeyDown, false);\n    return () => {\n      document.removeEventListener('keydown', onKeyDown, false);\n    };\n  }, [isShown]);\n\n\n  const modal = (\n    <React.Fragment>\n      <div className='modal-back'>\n        <div className='modal-wrapper' >\n          <div className='modal'>\n            <div className='modal-header'>\n              <div className='modal-header-text'>{headerText}</div>\n              <div className='modal-close-button' onClick={hide}>x</div>\n            </div>\n            <div className='modal-content'>\n              <span className='scroll_style'>{modalContent}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n  return isShown ? ReactDOM.createPortal(modal, document.body) : null;\n};","import {AdditionalFeatures, ProductType} from \"./types\";\n\nexport const additionalFeatures: AdditionalFeatures = {\n    0: {title: 'Additinal feature for $100', price: 100},\n    1: {title: 'Additinal feature for $200', price: 200}\n};\n\nexport const productsTypes: Array<ProductType> = [\n    {title: 'Product $50', price: 50},\n    {title: 'Product $100', price: 100},\n    {title: 'Product $300', price: 300},\n];","import React, {useState} from 'react';\nimport {FormOrder} from \"./FormOrder\";\nimport {useModal} from \"../modal/useModal\";\nimport {Modal} from \"../modal/Modal\";\nimport {additionalFeatures, productsTypes} from \"../constants/mock\";\n\n\nexport const FormInModal: React.FC = () => {\n\n    const {isShown: isShown, toggle: toggleShow} = useModal();\n    const [errorSend, setErrorSend] = useState<undefined | boolean>(undefined);\n    const [sending, setSending] = useState(false);\n\n    const sendForm = async (data: any) => {\n        const url = 'https://httpbin.org/post';\n        setSending(true);\n        toggleShow();\n        const result = await fetch(url, {\n            method: 'post',\n            headers: {\n            'Content-Type': 'application/json',\n             Accept: 'application/json',\n            },\n            body: JSON.stringify({...data}),\n        })\n            .then(response => {\n                setErrorSend(false);\n                return response.json();\n            })\n            .catch(reason =>{\n                console.error(reason);\n                setErrorSend(true);\n            })\n            .finally(() => {\n                setSending(false);\n            });\n        console.log('result', result);\n    };\n\n    const handleClick = () => {\n        toggleShow();\n        setErrorSend(undefined);\n    };\n\n    return(\n        <div className='form-in-modal'>\n            <div className='block-center'>\n                {errorSend !== undefined &&\n                    <div className='result-send'>\n                        {errorSend ? 'Sending error.' : 'Successfully sent.'}\n                    </div>\n                }\n                {sending &&\n                    <div className='result-send'>Sending...</div>\n                }\n\n                <button type='button' id=\"open-form\" onClick={handleClick}>Fill in the form</button>\n            </div>\n            <Modal isShown={isShown}\n                   hide={toggleShow}\n                   modalContent={<FormOrder additionalFeatures={additionalFeatures}\n                                            productsTypes={productsTypes}\n                                            handleSendForm={sendForm}/>}\n                   headerText={\"\"}/>\n        </div>\n    )\n};","import { useState } from 'react';\nexport const useModal = () => {\n  const [isShown, setIsShown] = useState<boolean>(false);\n  const toggle = () => setIsShown(!isShown);\n  return {\n    isShown,\n    toggle,\n  };\n};","import React from 'react';\nimport {FormInModal} from \"./components/FormInModal\";\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <FormInModal />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}